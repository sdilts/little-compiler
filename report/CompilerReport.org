#+TITLE:The Little Compiler
#+AUTHOR:Stuart Dilts Joe Witney
# Need to change the color of the generated links

* Introduction
  When writing a computer program, many developers and scientists want to
  think about what the program is going accomplish, and focus on the
  algorithms that are deployed, not how the computer's state
  machine is actually performing each and every action. In order
  to achieve this abstraction, a compiler is needed to translate a
  programmer's ideas into the low level assembly code of the
  system. Compilers have other benefits as well, including simple code
  optimization and code portability. For our senior capstone project,
  we are implementing a compiler for the Tiny Language. To write a
  compiler, one needs to be able to apply various aspects of computer
  science including language parsing, finite autamata, .., all while
  following good software engineering principles.
  
* Background
   What is a compiler? What components does it have? examples of a
   compiler? What is the Tiny Language?
* Methods And Discussion
  Java and ANTLR are being used to build the compiler. ANTLR is generating both the scanner and
  the parser modules of the compiler. Both of these were chosen to
  speed up development time, as both of the authors are very familiar
  with Java, and ANTLR is strongly recommended by our professors.
** Scanner
   The scanner splits the language up into tokens, which are the basic
   building blocks of the program. The scanner knows nothing about
   what the program actually does; it simply looks at each word of the
   input program and classifies the word based on the language
   specification. The main goal of this module of the compiler is to
   make the parser easier to implement and design. 

   Both the scanner and the parser are implemented through ANTLR. The
   scanner portion consists of specifying the token types and the
   regular expressions that can be used to identify each token in the
   source code.
** Parser
** Symbol Table
** Semantic Routines
** Full Fledged Compiler
* Conclusion and Further Work