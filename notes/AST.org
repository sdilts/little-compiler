* Building the math stuff
  #+BEGIN_EXAMPLE
    if getting id or literal x
       if(stackisEmpty) {
  	push x
       else if( stack not empty)
  	t = pop stack
  	t.addlowest(x) or t.addRightChild(x)
  	push(t)

    if getting addop x
       create new node with x as item
       mode.addleftchild(stack.pop())
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
    stack of trees
    current tree

    when enter expr:
         push current tree onto the stack
         start working on a new tree

    when exit expr:
         r = stack.pop();
         r.setRight(current tree);
         current tree = r;
  #+END_EXAMPLE
* AST for everything
** General Node
   + flatten: generate IR for the given block
** statement body
   + list of statements
   #+BEGIN_SRC java
     for(Statement s : statementList) {
         s.flatten()
     }
   #+END_SRC
** General math
   + operator
   + MathNode op 1
   + MathNode op 2
   #+BEGIN_SRC java
     String flatten(String location) {
         String code = "";
         String op1Val;
         String op2Val;
         if(op1 === valNode) {
   	  op1Val = op1.getValue();
         } else {
   	  op1Val = tempRegister;
   	  code += op1.flatten(op1Val)
         }
         //same for op2
         code += op + op1Val + op2Val + location;
         return location;

     }
   #+END_SRC
** While loops
   + Condition node
   + Statement node
   #+BEGIN_SRC java
     String flatten() {
         String code = "";
         code += jmpLabel;
         code += condition.flatten(endLabel);
         code += body.flatten();
         code += jump to jmpLabel;
         code += endLabel
     }
   #+END_SRC
   #+BEGIN_SRC asm
     LABEL:	JNE A B END
   	  ;; body
   	  JMP LABEL
     END:	
   #+END_SRC
** If/Else statements
   + condition
   # weird religion:
   + true body
   + false body
   for code
   #+BEGIN_SRC java
     if( a == b) {
         //do stuff
     } else {
         //do stuff
     }
   #+END_SRC
   generate this:
   #+BEGIN_SRC asm
   	  JNE A B ELSE
   	  ;; do stuff
   	  JMP END
     ELSE:
   	  ;; do stuff
     END:	
   #+END_SRC
   Some psuedocode:
   #+BEGIN_SRC java
     String flatten() {
         String code = "";
         code += condition.flatten(ELSE);
         code += trueBody.flatten();
         code += JMP END;
         code += Else label;
         code += falseBody.flatten();
         code += end label;
     }
   #+END_SRC
** Assignment
   A = B + C
   + expression
   + location
   #+BEGIN_SRC java
     String flatten(){
         String code = "";
    
         code += expression.flatten(location);
     }
   #+END_SRC
** Condition
   + expr1 node
   + expr2 node
   + data for type of condition
   #+BEGIN_SRC java
     String flatten(Label) {
         String code;
         code += expression1.flatten(Temp1);
         code += expression2.flatten(Temp2);
         switch(conditionType) {
         case "<":
         case ">":
   	  //etc
         }	    
         code += "JMP Temp1 Temp2 Label"
     }
   #+END_SRC
   #+BEGIN_SRC asm
   	  ADD A B T1
   	  ADD C D T2
   	  ;; We tell the expression to put the results in these registers
   	  JMP T1 T2 LABEL
   #+END_SRC
# ** functions
* UML
  #+BEGIN_SRC plantuml :file ast.png
    interface IStmt {
  	    StringBuilder flatten(SymbolStack symbols)
    }

    interface IReturnable {
  	    StringBuilder flatten(SymbolStack symbols, String saveLocation);
    }

    interface ITree {
  	    void addChild(Object child)
  	    boolean isFull()
  	    void print()
    }

    class While
    class If
    class Assign
    class Condition
    class StmtList
    class MathExpression
    class Read
    class Write


    ITree <|-- IStmt
    ITree <|-- IReturnable

    IStmt <|.. While
    IStmt <|.. If
    IStmt <|.. Assign
    IStmt <|.. StmtList
    IStmt <|.. Read
    IStmt <|.. Writex
  #+END_SRC